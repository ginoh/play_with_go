### 個人的なポイントメモ

* コメントの書き方は`//`や`/*` で大体の言語と同じ
* 文の区切りはセミコロンだが、基本的にセミコロンは省略可能。スタイルとしてはどうするべき？
* 定義済み関数の`print`、`println`は標準エラー出力に出力する。`fmt`パッケージは標準出力に出力する。
* 変数は大まかに`値型`、`参照型`、`ポインタ型`の３種類。
* 変数には明示的な定義と暗黙的な定義がある。
* 明示的な定義では`var [変数] [型]`のように定義する。
* 暗黙的な定義は `x := 10`のように`:=`を利用して型と値をまとめて定義する
* var では定義を `()`でまとめられるので、複数の定義をするときは`var`を利用するとわかりやすい
* 変数は関数の中で定義される`ローカル変数`とパッケージ内で共通の`パッケージ変数`がある。
* Goには暗黙的な型変換は存在しない
* 整数型を演算する場合はオーバーフロー
* Goでは例外処理はなく、関数の戻り値が複数返せることを利用してエラー情報の取得に利用するのがイディオムになっている。
* 定数はconstを使って定義する。定数には型ありと型なしがある。
* パッケージの変数・関数が外部に公開されるかどうかは、識別子(名前)の１文字目が大文字(公開)か、小文字(非公開)による
